Cork repositories implement the WSGI protocol. CorkRepo.wsgi is a WSGI
application.
  >>> import cork
  >>> from tempfile import mkdtemp
  >>> repo_dir = mkdtemp()
  >>> def write_note(name, data):
  ...   f = open(repo_dir + name, 'wb')
  ...   f.write(data.encode('utf-8'))
  ...   f.close()
  ... 
  >>> my_repo = cork.open_repo(repo_dir)
  >>> my_repo.wsgi
  <bound method CorkRepo.wsgi of <CorkRepo at "...">>

Let's set up a test server for our application. The "wsgiref" module makes it
easy. We use the "validator" middleware to check our app's conformance.
  >>> import sys, StringIO
  >>> import wsgiref.handlers, wsgiref.validate, wsgiref.util
  >>> env = {'PATH_INFO': '/thepage', 'SCRIPT_NAME': '', 'QUERY_STRING': ''}
  >>> wsgiref.util.setup_testing_defaults(env)
  >>> server = wsgiref.handlers.SimpleHandler(StringIO.StringIO(),
  ...     sys.stdout, sys.stderr, env)
  >>> repo_app = wsgiref.validate.validator(my_repo.wsgi)
  >>> server.run(repo_app)
  HTTP/1.0 404 Not Found...

We requested a note called '/thepage', which doesn't exist, so we got a 404
error. Let's create the note and see what is returned.
  >>> write_note('/thepage.note', """\
  ... a: b
  ... """)
  >>> server.run(repo_app)
  HTTP/1.0 200 OK...
  {a: b}
  >>> pass

This isn't terribly interesting, we're just publishing YAML representations of
notes. We might as well serve the files statically. But if the note has a method
named "_wsgi_", it gets called to handle the request.
  >>> write_note('/dynamic.note', """\
  ... key: red
  ... _wsgi_: !py |
  ...   def __call__(note, environ, start_response):
  ...     start_response('200 OK', [('Content-Type', 'text/plain')])
  ...     return ['we have the %s key\\n' % note['key']]
  ... """)
  >>> env['PATH_INFO'] = '/dynamic'; server.run(repo_app)
  HTTP/1.0 200 OK...
  we have the red key

And, of course, we clean up the test folder.
  >>> from shutil import rmtree
  >>> rmtree(repo_dir)
