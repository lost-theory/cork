Notes will typically live in the filesystem, as plain text files. They can exist
in isolation, or grouped together, in a repository. Let's see what a repository
looks like.
  >>> import cork
  >>> from tempfile import mkdtemp
  >>> repo_dir = mkdtemp()
  >>> def write_note(name, data):
  ...   f = open(repo_dir + name, 'wb')
  ...   f.write(data.encode('utf-8'))
  ...   f.close()
  ... 
  >>> my_repo = cork.open_repo(repo_dir)
  >>> my_repo
  <CorkRepo at "...">

Right now my_repo is empty. If we create files in that folder, my_repo will
pick them up automatically. We grab notes using the "walk" method. To get a hold
of note contents we use dict-like syntax.
  >>> write_note('/colors.note', """\
  ... apple: green
  ... banana: yellow
  ... tomato: red
  ... """)
  >>> my_repo.walk('/colors')
  <CorkNote at 0x...>
  >>> my_repo.walk('/colors')['apple']
  'green'

Notes remember which repository they're part of, so we can access other notes
from within methods:
  >>> write_note('/first.note', """\
  ... wants: banana
  ... also_wants: orange
  ... ask: !py |
  ...   def __call__(note):
  ...     want = note['wants']
  ...     return 'give me something %s' % note.walk('/colors')[want]
  ... """)
  >>> my_repo.walk('/first')['ask']()
  'give me something yellow'

Note are objects with data and methods. They can also inherit data and methods
from other notes. Cork supports prototypal inheritance through the special
_inherit_ property.
  >>> write_note('/second.note', """\
  ... _inherit_: /first
  ... wants: tomato
  ... """)
  >>> my_repo.walk('/second')['ask']()
  'give me something red'
  >>> my_repo.walk('/second')['also_wants']
  'orange'

Finally, we'll clean up that temporary folder we made in the beginning.
  >>> from shutil import rmtree
  >>> rmtree(repo_dir)
